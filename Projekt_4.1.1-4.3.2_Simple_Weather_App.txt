Projekt_4.1.1-4.3.2_Simple_Weather_App

Erstelle ein neues Git und GitHub Repository, committe deinen Code und pushe den Code ins GitHub. F√ºge dann den Link zu dem GitHub-Projekt hier ein.

 Mache nach jeder Teilaufgabe einen Commit und einen Push.

Deine Antwort:
https://github.com/JuergenHollmann/project_12_weather_app


Lass uns nun Schritt f√ºr Schritt die Wetter-App entwickeln! üå¶Ô∏è‚òÇ

Beginne damit, einen Scaffold hinzuzuf√ºgen, damit die Grundstruktur der App erstellt werden kann.
F√ºge dem Scaffold eine AppBar hinzu, welche einen sinnvollen Titel enth√§lt.
Der schon vorhandene Container soll als Body des Scaffold eingesetzt werden.
Mache Commit und Push.

Nun k√ºmmern wir uns um den Body der Applikation.

F√ºge dem bereits vorhandenen Container den folgenden Text hinzu: ‚ÄúWillkommen zur Wetter-App!‚Äù

Style nun den Text
Nutze die Farbe Blau.
Setze die Schriftgr√∂√üe auf 24.
Mache Commit und Push.

Nun sollen ebenfalls eine Stadt, die Temperatur und das Wetter angezeigt werden. Diese sollen jeweils auf eine eigene Zeile.

F√ºge jeweils Stadt, Temperatur und Wetter hinzu. Verwende f√ºr die eigene Zeile ein entsprechendes Flutter-Widget, das du in der Vorlesung kennengelernt hast.
Zentriere Stadt, Temperatur und Wetter vertikal, sodass sie nicht mehr oben am Rand, sondern in der Mitte sind. 
Hinweis: Hierf√ºr musst du vermutlich eine Eigenschaft des Widgets setzen, das du verwendet hast, um die anderen Widgets untereinander anzuzeigen.
Mache Commit und Push.

Nun soll die App noch h√ºbscher gemacht werden.

Stelle die Texte auf dem Bildschirm auch horizontal zentriert dar.
√Ñndere die Gr√∂√üe des Textes der Stadt, sodass sie gr√∂√üer als Temperatur und Wetter dargestellt wird.
√Ñndere den Titel in der App Bar, damit er sch√∂ner aussieht (Gr√∂√üe, Farbe, ‚Ä¶).
Mache Commit und Push

Die Wetterinformationen sollen nun in einer eigenen Klasse gespeichert werden. Diese soll WeatherData hei√üen. Diese Klasse ist kein Widget! Sie soll nur die Daten enthalten.

Erstelle die Klasse WeatherData mit folgenden Attributen:
String city
double temperature
String weatherCondition

weatherCondition kann zum Beispiel die folgenden Werte enthalten: sunny, cloudy, rainy, stormy.
Verwendung von WeatherData
---------
Lege nun ein Beispielobjekt der Klasse WeatherData in der main-Funktion an. Dieses Objekt soll der Klasse WeatherApp als Attribut √ºbergeben werden. Daf√ºr muss es zuerst der MainApp als Attribut √ºbergeben werden.

Als letztes m√∂chten wir das Wetter anzeigen lassen. √Ñndere die schon vorhandenen Widgets so ab, dass sie die Daten aus der WeatherData-Klasse verwenden.

Mache wieder Commit und Push üòÉ

Das Wetter soll nun aus einem WeatherRepository geholt werden.

Erstelle eine Klasse WeatherRepository, in einer eigenen Datei.
Das WeatherRepository soll nun das Wetter enthalten.
Das Wetter soll private sein, also von au√üen nicht direkt erreich- und √§nderbar.
Erstelle im WeatherRepository eine Methode, um das Wetter abzurufen.
Erstelle ein Objekt der Klasse WeatherRepository in der main-Funktion und gib dieses, anstelle des WeatherData-Objektes, als Parameter weiter.
Daf√ºr muss das Attribut in den entsprechenden Klassen angepasst werden, sodass jetzt das WeatherRepository anstatt WeatherData gespeichert wird.
Verwende das Wetter aus dem WeatherRepository, indem das Weather geholt wird und die Daten an den entsprechenden Stellen angezeigt werden.

Hinweis: Das WeatherRepository gibt ein WeatherData zur√ºck.

Mehr Wetter!!!
Nat√ºrlich gibt es mehr Orte, an denen es Wetter gibt. Das WeatherRepository soll so umgebaut werden, dass es zuf√§llig das Wetter von einem Ort zur√ºck gibt, anstatt immer das Wetter vom selben Ort.

Wandle das WeatherRepository so um, dass es eine Liste von WeatherData enth√§lt, anstatt ein einzelnes WeatherData.
Passe die Methode, welche ein WeatherData zur√ºckgibt, so an, dass sie zuf√§llig eins der WeatherData aus der Liste zur√ºckgibt..
Dies kannst du testen, indem du die App restartest ( ). Es sollte dann jeweils ein anderes Wetter angezeigt werden.

 
Neuen Ort anzeigen (schwer!) 
Es soll ein neuer Ort mithilfe eines Floating Action Button angezeigt werden k√∂nnen. Hierf√ºr muss sich das Widget merken, von welchem Ort gerade das Wetter angezeigt wird, und es auf Wunsch √§ndern.

Stelle das WeatherApp Widget auf ein StatefulWidget um.
Speichere das WeatherData in dem State des Widgets.
F√ºge einen Floating Action Button hinzu.
Der Floating Action Button soll nun in seiner onPressed(...) ein neues WeatherData aus dem Repository holen, es in der Variable f√ºr WeatherData speichern und dann setState() aufrufen, damit das neue Wetter angezeigt wird.
Wenn man nun den FAB dr√ºckt, sollte ein neues Wetter angezeigt werden üéâ

Hinweis: Falls dein WeatherRepository im StatefulWidget selber ist und nicht im State, kannst du trotzdem √ºber widget.weatherRepository darauf zugreifen (bzw. dem Namen, den du der Variable des WeatherRepository gegeben hast).

Implementieren:
floatingActionButton: FloatingActionButton.extended(onPressed: null, label: Text("Bonus 2")),